// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	articles "test/alterstay/features/articles"

	mock "github.com/stretchr/testify/mock"
)

// ArticleBusiness is an autogenerated mock type for the Data type
type ArticleBusiness struct {
	mock.Mock
}

// GetAllData provides a mock function with given fields:
func (_m *ArticleBusiness) GetAllData() ([]articles.Core, error) {
	ret := _m.Called()

	var r0 []articles.Core
	if rf, ok := ret.Get(0).(func() []articles.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: insert
func (_m *ArticleBusiness) InsertData(insert articles.Core) (int, error) {
	ret := _m.Called(insert)

	var r0 int
	if rf, ok := ret.Get(0).(func(articles.Core) int); ok {
		r0 = rf(insert)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(articles.Core) error); ok {
		r1 = rf(insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewArticleBusiness interface {
	mock.TestingT
	Cleanup(func())
}

// NewArticleBusiness creates a new instance of ArticleBusiness. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticleBusiness(t mockConstructorTestingTNewArticleBusiness) *ArticleBusiness {
	mock := &ArticleBusiness{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
